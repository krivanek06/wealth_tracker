datasource db {
    provider = "mongodb"
    url      = "mongodb+srv://krivanek:MMkkll1122@serverlessinstance0-tes.752cf.mongodb.net/wealth-tracker-test?retryWrites=true&w=majority"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id             String          @id @default(auto()) @map("_id") @db.ObjectId
    createdAt      DateTime        @default(now())
    imageUrl       String?
    username       String          @unique
    email          String          @unique
    lastSingInDate DateTime        @default(now())
    accountType    UserAccountType @default(NOMRAL)

    // how user created his account
    authentication UserAuthentication

    // 1 - 1 relationship with an investment account
    investmentAccount InvestmentAccount?

    // 1 - 1 relationship with a personal account
    personalAccount                 PersonalAccount?
    personalAccountMonthlyData      PersonalAccountMonthlyData[]
    PersonalAccountRecurringExpense PersonalAccountRecurringExpense[]

    personalAccountId   String? @db.ObjectId
    investmentAccountId String? @db.ObjectId
}

type UserAuthentication {
    authenticationType AuthenticationType

    // Used for social media atuehntication
    token String?

    // used for basic authentication 
    password String?
}

enum AuthenticationType {
    BASIC_AUTH
    GOOGLE
}

enum UserAccountType {
    TEST
    ADMIN
    NOMRAL
}

// ---------------- Personal account ------------------

model PersonalAccount {
    id               String      @id @default(auto()) @map("_id") @db.ObjectId
    name             String
    createdAt        DateTime    @default(now())
    accountType      AccountType
    enabledBudgeting Boolean

    // 1 - 1 relationship with user
    userId String @unique @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])

    // 1 - N relationship with PersonalAccountTag
    personalAccountTag PersonalAccountTag[]

    // 1 - N reference with PersonalAccountMonthlyData
    MonthlyData PersonalAccountMonthlyData[]

    // 1 - N relationship with PersonalAccountReccuringExpense
    PersonalAccountRecurringExpense PersonalAccountRecurringExpense[]
}

type PersonalAccountTag {
    id            String
    createdAt     DateTime                   @default(now())
    name          String // custom name 
    color         String
    imageUrl      String
    type          PersonalAccountTagDataType
    budgetMonthly Float?

    // user who created the tag -  N - 1 relationship with user 
    userId String
}

enum PersonalAccountTagDataType {
    INCOME
    EXPENSE
}

model PersonalAccountRecurringExpense {
    id                String   @id @default(auto()) @map("_id") @db.ObjectId
    name              String
    tagId             String
    createdAt         DateTime @default(now())
    executedAt        DateTime @updatedAt // when this was last executed
    executionNextTime DateTime // when it should be executed next
    value             Float // how much to subscract

    // timestamp how often this should be execuced
    // increment value in days (min 1 day)
    executionFrequency Float

    // executed items
    items PersonalAccountRecurringExpenseItem[]

    // N - 1 reference to PersonalAccount
    PersonalAccount   PersonalAccount @relation(fields: [personalAccountId], references: [id], onDelete: Cascade)
    personalAccountId String          @db.ObjectId

    // N - 1 reference to User
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId
}

type PersonalAccountRecurringExpenseItem {
    id         String
    executedAt DateTime
    value      Float
}

// Created by cloud functions that runs once per month
model PersonalAccountMonthlyData {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    month Int // 8 == 'September', 0 == 'January',
    year  Int // 2022

    // daily entries of user's expenses / incomes - changed on user's input
    dailyData PersonalAccountDailyData[]

    // N - 1 reference to User
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique @db.ObjectId

    // N - 1 reference to PersonalAccount
    PersonalAccount   PersonalAccount @relation(fields: [personalAccountId], references: [id], onDelete: Cascade)
    personalAccountId String          @db.ObjectId
}

type PersonalAccountDailyData {
    id                String // random UUID 
    tagId             String // ID of TagData -> Can be modified, resolved on the FE!
    description       String?
    userId            String // user who created the daily entry
    monthlyDataId     String // PersonalAccountMonthlyData.id
    personalAccountId String // PersonalAccount.id

    value Float // $ how much I paid / received
    date  DateTime // what date this entry is associated
    week  Int // Week 37 <- calculate on DB update
}

// ---------------- Investment account ------------------
model InvestmentAccount {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    name        String // custom name for personal account
    createdAt   DateTime    @default(now())
    accountType AccountType

    // 1 - 1 relationship with user
    userId String @unique @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])

    // whole history of changed cash on hand
    cashChange InvestmentAccountCashChange[]

    // whole history of purchased/sold assets
    holdings InvestmentAccountHolding[]
}

type InvestmentAccountCashChange {
    itemId    String // random UUID
    cashValue Float
    date      String // YYYY-MM-DD
    type      InvestmentAccountCashChangeType
}

enum InvestmentAccountCashChangeType {
    DEPOSIT
    WITHDRAWAL
    ASSET_OPERATION
}

// the whole history of the one asset that was bough, completly sold, then bought again
type InvestmentAccountHolding {
    id                  String // AAPL, MSFT, BTC
    assetId             String // AAPL, MSFT, BTC
    investmentAccountId String

    type   InvestmentAccountHoldingType
    sector String

    // whole history of sells/purchases of assetId
    holdingHistory InvestmentAccountHoldingHistory[]
}

type InvestmentAccountHoldingHistory {
    itemId    String
    assetId   String // ref InvestmentAccountHolding.assetId
    createdAt DateTime @default(now()) // when entry was created
    date      String // YYYY-MM-DD of day when it was added to holdings
    units     Float // how many units of asset the user have

    unitValue    Float
    type         InvestmentAccountHoldingHistoryType
    return       Float?
    returnChange Float?
}

enum InvestmentAccountHoldingHistoryType {
    BUY
    SELL
}

enum InvestmentAccountHoldingType {
    STOCK
    CRYPTO
    ETF
    ADR
    MUTUAL_FUND
    COMMODITY
}

enum AccountType {
    PERSONAL
    INVESTMENT
}

// ---------------- Asset manager general ------------------

model AssetGeneral {
    id             String  @id @map("_id") // symbol name: AAPL, MSFT, QQQ, ...
    name           String // asset full name
    symbolImageURL String?

    // when additional information were lastly updated 
    assetIntoLastUpdate DateTime @updatedAt

    // additional data for a stock
    assetQuote AssetGeneralQuote
}

model AssetGeneralHistoricalPrices {
    id String @id @map("_id") // symbol name: AAPL, MSFT, QQQ, ...

    // range of downloaded assetHistoricalPricesData -> 
    dateStart String // YYYY-MM-DD - assetHistoricalPricesData[0].date
    dateEnd   String // YYYY-MM-DD - assetHistoricalPricesData[-1].date

    assetHistoricalPricesData AssetGeneralHistoricalPricesData[]
}

type AssetGeneralHistoricalPricesData {
    date  String // "2022-03-12"
    close Float
}

type AssetGeneralQuote {
    symbol            String
    symbolImageURL    String?
    price             Float
    changesPercentage Float
    change            Float
    dayLow            Float?
    dayHigh           Float?
    yearHigh          Float?
    yearLow           Float?
    name              String
    marketCap         Float
    priceAvg50        Float?
    priceAvg200       Float?
    avgVolume         Float?
    volume            Float
    exchange          String

    // for crypto it is current supply
    sharesOutstanding Float?

    // tells when this was updates
    timestamp Float

    // only present for stocks
    eps                  Float?
    pe                   Float?
    earningsAnnouncement String?
}

// ---------------- Asset manager stock ------------------

model AssetStock {
    // symbol name: AAPL, MSFT, QQQ, ...
    id String @id @map("_id")

    profile AssetStockProfile

    lastUpdated DateTime @default(now())
}

type AssetStockProfile {
    companyName       String
    currency          String
    cik               String
    isin              String
    cusip             String
    exchange          String
    exchangeShortName String
    industry          String
    website           String
    description       String
    ceo               String
    sector            String
    country           String
    fullTimeEmployees String
    phone             String
    address           String
    city              String
    state             String
    zip               String
    image             String
    ipoDate           String
    defaultImage      Boolean
    isEtf             Boolean
    isActivelyTrading Boolean
    isAdr             Boolean
    isFund            Boolean
}
