datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt      DateTime @default(now())
    imageUrl       String?
    username       String   @unique
    email          String   @unique
    lastSingInDate DateTime @default(now())

    // how user created his account
    authentication UserAuthentication

    // 1 - 1 relationship with user tags
    // one user can craete multiple tags
    PersonalAccountTags PersonalAccountTag[]

    // 1 - N relationship with multiple investment accounts
    // one user can craete multiple investment accounts
    InvestmentAccounts InvestmentAccount[]

    // 1 - N relationship with multiple personal accounts
    // one user can craete multiple personal accounts
    PersonalAccounts PersonalAccount[]
}

type UserAuthentication {
    authenticationType AuthenticationType

    // Used for social media atuehntication
    token String?

    // used for basic authentication 
    password String?
}

enum AuthenticationType {
    BASIC_AUTH
    GOOGLE
}

// ---------------- Personal account ------------------

model PersonalAccount {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    createdAt DateTime @default(now())

    // 1 - N reference with PersonalAccountMonthlyData
    MonthlyData PersonalAccountMonthlyData[]

    // 1 - N relationship with user
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId

    // 1 - N relationship with PersonalAccountTag
    PersonalAccountTag PersonalAccountTag[]
}

model PersonalAccountTag {
    id         String                     @id @default(auto()) @map("_id") @db.ObjectId
    createdAt  DateTime                   @default(now())
    modifiedAt DateTime                   @updatedAt
    name       String // custom name for personal account
    type       PersonalAccountTagDataType

    // True only for default Tags - by admin
    isDefault Boolean @default(false)

    // N - 1 relationship with user 
    // user who created the tag
    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? @unique

    // N - 1 relationship with PersonalAccount
    // Used to display this Tag only for one specific account 
    PersonalAccounSpecific PersonalAccount? @relation(fields: [personalAccountId], references: [id])
    personalAccountId      String?          @unique
}

enum PersonalAccountTagDataType {
    INCOME
    EXPENSE
}

// Created by cloud functions that runs once per month
model PersonalAccountMonthlyData {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    month Int // 8 == 'September', 0 == 'Januar',
    year  Int // 2022

    // daily entries of user's expenses / incomes - changed on user's input
    dailyData PersonalAccountDailyData[]

    // N - 1 reference to PersonalAccount
    PersonalAccount   PersonalAccount @relation(fields: [personalAccountId], references: [id], onDelete: Cascade)
    personalAccountId String          @db.ObjectId
}

type PersonalAccountDailyData {
    id            String // random UUID 
    tagId         String // ID of TagData -> Can be modified, resolved on the FE!
    userId        String // user who created the daily entry
    monthlyDataId String // PersonalAccountMonthlyData.id

    value Float // $ how much I paid / received
    date  DateTime // what date this entry is associated
    week  Int // Week 37 <- calculate on DB update
}

// ---------------- Investment account ------------------
model InvestmentAccount {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String // custom name for personal account
    cashCurrent Float  @default(0) // how much cash on hand user has in the trading platform

    // all assets user hold in his InvestmentAccount
    holdings InvestmentAccountHolding[]

    // last inserted value in InvestmentAccountSnapshots[-1], new accounts the first day is null
    lastPortfolioSnapshot InvestmentAccountPortfolioSnapshot?

    // 1 - N relationship with user
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.ObjectId

    // 1 - 1 relationship with InvestmentAccountSnapshots
    investmentAccountHistory InvestmentAccountHistory?
}

model InvestmentAccountHistory {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    portfolioSnapshotTotal Int
    portfolioSnapshots     InvestmentAccountPortfolioSnapshot[]

    // 1 - 1 relationship with InvestmentAccount
    InvestmentAccount   InvestmentAccount @relation(fields: [investmentAccountId], references: [id], onDelete: Cascade)
    investmentAccountId String            @unique
}

type InvestmentAccountHolding {
    id                  String // ID of symbol in DB -> AAPL, MSFT
    investmentAccountId String // InvestmentAccount.id
    type                InvestmentAccountHoldingType
    units               Float // how many units of asset the user have
    investedAlready     Float // $ how much user invested into a specific asset
}

enum InvestmentAccountHoldingType {
    STOCK
    CRYPTO
}

type InvestmentAccountPortfolioSnapshot {
    id                String // random UUID 
    date              DateTime @default(now())
    cash              Float // user input
    investmentCurrent Float // current investment of all (assets * units)
}

// ---------------- Asset manager stock ------------------
model AssetStock {
    symbol String @id @map("_id")

    // when price was lastly updated - usually end of each day by cloud function
    priceUpdateTimestamp Float

    // when additional information were lastly updated 
    infoUpdateTimestamp Float

    // additional data for a stock
    assetStockQuote   AssetStockQuote
    assetStockProfile AssetStockProfile
}

type AssetStockQuote {
    symbol               String
    price                Float
    volume               Float
    name                 String
    changesPercentage    Float
    change               Float
    dayLow               Float
    dayHigh              Float
    yearHigh             Float
    yearLow              Float
    marketCap            Float
    priceAvg50           Float
    priceAvg200          Float
    avgVolume            Float
    exchange             String
    open                 Float
    previousClose        Float
    eps                  Float?
    pe                   Float?
    earningsAnnouncement String?
    sharesOutstanding    Float

    // tells when this was updates
    timestamp Float
}

type AssetStockProfile {
    companyName       String
    currency          String
    cik               String
    isin              String
    cusip             String
    exchange          String
    exchangeShortName String
    industry          String
    website           String
    description       String
    ceo               String
    sector            String
    country           String
    fullTimeEmployees String
    phone             String
    address           String
    city              String
    state             String
    zip               String
    image             String
    ipoDate           String
    defaultImage      Boolean
    isEtf             Boolean
    isActivelyTrading Boolean
    isAdr             Boolean
    isFund            Boolean
}
